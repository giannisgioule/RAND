*===============================================================================
*                        identify_partitioning_variable.gms
*                                  called in
*                      Piecewise_Mathematical_methods.gms
*
* This file is responsible for identifying the correct partitioning variable
* in order to perform piecewise regresison.
*===============================================================================

*============================ Use multiple threads==============================
$onecho>cplex.opt
threads 12
$offecho
*===============================================================================


*===============================================================================
*---------------------------------BEGIN SCRIPT----------------------------------
*===============================================================================


*--------------------------------DEFINE THE SETS--------------------------------
* Define the sets for the optimisation model. A set is needed for the number of
* partitioning regions (in this case only two), a set for all the samples in the
* regression dataset and a set to define the input variables
*-------------------------------------------------------------------------------

sets
r        set of partitioning regions /r1*r2/
s        the set of all the samples
m        the set of all the input variables
;

*-----------------------DEFINE THE REGRESSION PARAMETERS------------------------
* Define the regression parameters. These include the numerical input values and
* the output for all the values
*-------------------------------------------------------------------------------
parameters
Y(s)     Response of dataset
A(s,m)   Values of dataset
;

*--------------------------------DEFINE SCALARS---------------------------------
* Define two scalars and assign large values to formulate the bigM constraints
*-------------------------------------------------------------------------------
scalars
U1       large positive number for the bigM constraints /10/
U2       large positive number for the bigM constraints
;

*-------------------------LOAD THE DATA GENERATED BY R--------------------------
* After defining the necessary sets and parameters, import their values using
* .gdx files that are generated by R
*-------------------------------------------------------------------------------
$GDXIN "input.gdx"
$LOAD s,m,Y,A


U2=100*sum(s,abs(Y(s)))/card(s);

* A duplicate variable set used in the equations to set and loop the
* partitioning variable

alias (part_variable,m);

* A duplicate variable set used at the end of the script to create a loop and
* solve the model multiple times (set m cannot be used because it appears in
* the model equations)
alias (loop_part_variable,m);

scalar
counter to change the partitioning feature /1/
;

*----------------------------DEFINE MODEL VARIABLES-----------------------------
* Define all the variables of the optimisation model
* Positive variables:  - Break point(s) (by default the data range is [0,1])
*                      - Absolute deviation between predictions and observations
*
* Free variables:      - Regression coefficients and intercept
*                      - Model predictions
*                      - The objective of the minimisation
*
* Binary variables:    - Samples to regions assignment
*-------------------------------------------------------------------------------
positive variables
X(r,part_variable)  break point r on partion feature m1
D(s)     training error between predicted output and real output for sample s
;

free variables
W(m,r)   regression coefficient for feature m in region r
B(r)     intercept of regression function in region r
Pr(s,r)  predicted output for sample s in region r
error    objective variable
;

binary variables
F(s,r)   1 if sample s falls into region r
;

*----------------------------DEFINE MODEL EQUATIONS-----------------------------
*-------------------------------------------------------------------------------
equations
eq1(r,part_variable)     Break point arrangement
eq2(s,r,part_variable)   Sample allocation into regions
eq3(s,r,part_variable)   Sample allocation into regions
eq4(s)                   Each sample belongs to one region
eq5(s,r)                 Predicted output for sample s
eq6(s,r)                 Absolute deviation
eq7(s,r)                 Absolute deviation
obj                      Minimazition of absolute training error;


eq1(r,part_variable)$
         ((ord(r) > 1)and(ord(r)<card(r))and (ord(part_variable) eq counter))..
         X(r-1,part_variable)=l=X(r,part_variable);


eq2(s,r,part_variable)$((ord(r) > 1)and(ord(part_variable) eq counter))..
         X(r-1,part_variable)-U1*(1-F(s,r))+0.001=l=A(s,part_variable);


eq3(s,r,part_variable)$((ord(r) < card(r))and(ord(part_variable)eq counter))..
         A(s,part_variable)=l=X(r,part_variable)+U1*(1-F(s,r))-0.001;


eq4(s)..
         sum(r,F(s,r))=e=1;


eq5(s,r)..
         Pr(s,r)=e=sum(m,A(s,m)*W(m,r))+B(r);


eq6(s,r)..
         D(s)=g=Y(s)-Pr(s,r)-U2*(1-F(s,r));


eq7(s,r)..
         D(s)=g=Pr(s,r)-Y(s)-U2*(1-F(s,r));


obj..
         error=e=sum(s,D(s));


*-------------------------------MODEL DEFINITION--------------------------------
* Define the model identify_partitioning_variable and include all the equations
*-------------------------------------------------------------------------------
model identify_partitioning_variable /all/;


*--------------------------------SOLVER OPTIONS---------------------------------
* Select the CPLEX solver for this MILP formulation, set 0% optimality gap and
* set a CPU limit of 200s
*-------------------------------------------------------------------------------
option mip=cplex;
option optcr=0.0;
option reslim=200;


* Define a loop to solve the model for each independent variable and export
* the results

parameter
error_all_iterations(loop_part_variable) A vector to save the error of each run;

loop(loop_part_variable,
         solve identify_partitioning_variable using MIP minimizing error;
         counter=counter+1;
         error_all_iterations(loop_part_variable)=error.l;
    );


execute_unload 'best_part_variable.gdx',error_all_iterations;
;
*===============================================================================
*----------------------------------END SCRIPT-----------------------------------
*===============================================================================
